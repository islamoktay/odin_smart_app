// Mocks generated by Mockito 5.1.0 from annotations
// in odin_smart_app/test/feature/credential/signup/viewmodel/signup_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:flutter/material.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:odin_smart_app/core/_core_exports.dart' as _i3;
import 'package:odin_smart_app/core/_package_exports.dart' as _i6;
import 'package:odin_smart_app/feature/credential/signup/viewmodel/signup_cubit.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeTextEditingController_0 extends _i1.Fake
    implements _i2.TextEditingController {}

class _FakeGenericState_1 extends _i1.Fake implements _i3.GenericState {}

/// A class which mocks [SignUpCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignUpCubit extends _i1.Mock implements _i4.SignUpCubit {
  MockSignUpCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TextEditingController get emailController =>
      (super.noSuchMethod(Invocation.getter(#emailController),
              returnValue: _FakeTextEditingController_0())
          as _i2.TextEditingController);
  @override
  set emailController(_i2.TextEditingController? _emailController) =>
      super.noSuchMethod(Invocation.setter(#emailController, _emailController),
          returnValueForMissingStub: null);
  @override
  _i2.TextEditingController get passwordControllerOne =>
      (super.noSuchMethod(Invocation.getter(#passwordControllerOne),
              returnValue: _FakeTextEditingController_0())
          as _i2.TextEditingController);
  @override
  set passwordControllerOne(
          _i2.TextEditingController? _passwordControllerOne) =>
      super.noSuchMethod(
          Invocation.setter(#passwordControllerOne, _passwordControllerOne),
          returnValueForMissingStub: null);
  @override
  _i2.TextEditingController get passwordControllerTwo =>
      (super.noSuchMethod(Invocation.getter(#passwordControllerTwo),
              returnValue: _FakeTextEditingController_0())
          as _i2.TextEditingController);
  @override
  set passwordControllerTwo(
          _i2.TextEditingController? _passwordControllerTwo) =>
      super.noSuchMethod(
          Invocation.setter(#passwordControllerTwo, _passwordControllerTwo),
          returnValueForMissingStub: null);
  @override
  _i3.GenericState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeGenericState_1()) as _i3.GenericState);
  @override
  _i5.Stream<_i3.GenericState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.GenericState>.empty())
          as _i5.Stream<_i3.GenericState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i5.Future<void> signUp() =>
      (super.noSuchMethod(Invocation.method(#signUp, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  void emit(_i3.GenericState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i6.Change<_i3.GenericState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}
