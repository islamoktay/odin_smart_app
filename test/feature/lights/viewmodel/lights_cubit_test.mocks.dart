// Mocks generated by Mockito 5.1.0 from annotations
// in odin_smart_app/test/feature/lights/viewmodel/lights_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:odin_smart_app/core/_core_exports.dart' as _i2;
import 'package:odin_smart_app/core/_package_exports.dart' as _i5;
import 'package:odin_smart_app/feature/_feature_exports.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGenericState_0 extends _i1.Fake implements _i2.GenericState {}

class _FakeLightModel_1 extends _i1.Fake implements _i3.LightModel {}

/// A class which mocks [LightsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockLightsCubit extends _i1.Mock implements _i3.LightsCubit {
  MockLightsCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<bool> get isOpenList =>
      (super.noSuchMethod(Invocation.getter(#isOpenList), returnValue: <bool>[])
          as List<bool>);
  @override
  set isOpenList(List<bool>? _isOpenList) =>
      super.noSuchMethod(Invocation.setter(#isOpenList, _isOpenList),
          returnValueForMissingStub: null);
  @override
  List<double> get levelOfOpenList =>
      (super.noSuchMethod(Invocation.getter(#levelOfOpenList),
          returnValue: <double>[]) as List<double>);
  @override
  set levelOfOpenList(List<double>? _levelOfOpenList) =>
      super.noSuchMethod(Invocation.setter(#levelOfOpenList, _levelOfOpenList),
          returnValueForMissingStub: null);
  @override
  _i2.GenericState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeGenericState_0()) as _i2.GenericState);
  @override
  _i4.Stream<_i2.GenericState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.GenericState>.empty())
          as _i4.Stream<_i2.GenericState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i4.Future<bool> clickButtonMethod(bool? value, int? index) =>
      (super.noSuchMethod(Invocation.method(#clickButtonMethod, [value, index]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<void> getInfo() =>
      (super.noSuchMethod(Invocation.method(#getInfo, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> updateModelLocator(_i3.LightModel? response) =>
      (super.noSuchMethod(Invocation.method(#updateModelLocator, [response]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> updateLightIsOpenInfo() =>
      (super.noSuchMethod(Invocation.method(#updateLightIsOpenInfo, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void emit(_i2.GenericState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i5.Change<_i2.GenericState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [SampleLightsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSampleLightsRepository extends _i1.Mock
    implements _i3.SampleLightsRepository {
  MockSampleLightsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i3.LightModel> getInfo() =>
      (super.noSuchMethod(Invocation.method(#getInfo, []),
              returnValue: Future<_i3.LightModel>.value(_FakeLightModel_1()))
          as _i4.Future<_i3.LightModel>);
  @override
  _i4.Future<_i3.LightModel> updateLightInfo(List<bool>? list) =>
      (super.noSuchMethod(Invocation.method(#updateLightInfo, [list]),
              returnValue: Future<_i3.LightModel>.value(_FakeLightModel_1()))
          as _i4.Future<_i3.LightModel>);
  @override
  _i4.Future<_i3.LightModel> updateInfoForAll() =>
      (super.noSuchMethod(Invocation.method(#updateInfoForAll, []),
              returnValue: Future<_i3.LightModel>.value(_FakeLightModel_1()))
          as _i4.Future<_i3.LightModel>);
}
